{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Review","review","this","props","react_default","a","createElement","yelp_rating","model_rating","text","React","Component","Business","data","name","review_rating","App_Reviews","reviews","Reviews","listItems","map","App_Review","App","state","handleChange","event","_this","setState","target","value","handleSubmit","preventDefault","url","encodeURIComponent","axios","get","concat","then","response","catch","error","console","log","message","onSubmit","type","onChange","App_Business","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0PAIMA,mLAEF,IAAMC,EAASC,KAAKC,MAAMF,OAC1B,OACEG,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKL,EAAOM,aACZH,EAAAC,EAAAC,cAAA,UAAKL,EAAOO,cACZJ,EAAAC,EAAAC,cAAA,UAAKL,EAAOQ,cAPCC,IAAMC,WAarBC,mLAEF,IAAKV,KAAKC,MAAMU,KACd,OAAO,KAET,IAAMA,EAAOX,KAAKC,MAAMU,KAC1B,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4BAAoBO,EAAKC,MACzBV,EAAAC,EAAAC,cAAA,2CAAmCO,EAAKN,aACxCH,EAAAC,EAAAC,cAAA,8EAAsEO,EAAKE,eAC3EX,EAAAC,EAAAC,cAAA,8FAAsFO,EAAKL,cAC3FJ,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACU,EAAD,CAASC,QAASJ,EAAKI,kBAbNP,IAAMC,WAoBvBO,mLAEF,IACMC,EADUjB,KAAKC,MAAMc,QACDG,IAAI,SAACnB,GAAD,OAC9BG,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACe,EAAD,CAAQpB,OAAQA,OAGpB,OACEG,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,qBAEHa,UAfeT,IAAMC,WAsBPW,6MACnBC,MAAQ,CAAEV,KAAM,KAAMC,KAAM,GAAIG,QAAS,MAEzCO,aAAe,SAAAC,GACbC,EAAKC,SAAS,CAAEb,KAAMW,EAAMG,OAAOC,WAGrCC,aAAe,SAAAL,GACbA,EAAMM,iBACN,IAAIC,EAAMC,mBAAmBP,EAAKH,MAAMT,MACxCoB,IAAMC,IAAN,kCAAAC,OAA4CJ,IACzCK,KAAK,SAAAC,GAAQ,OAAIZ,EAAKC,SAAS,CAAEd,KAAMyB,EAASzB,SAChD0B,MAAM,SAAUC,GACfC,QAAQC,IAAI,gBAAkBF,EAAMG,oFAKxC,IAAM9B,EAAOX,KAAKqB,MAAMV,KAExB,OACET,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMsC,SAAU1C,KAAK4B,cACnB1B,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,SAAOuC,KAAK,OAAO/B,KAAK,OAAOgC,SAAU5C,KAAKsB,gBAEhDpB,EAAAC,EAAAC,cAAA,UAAQuC,KAAK,UAAb,YAGFzC,EAAAC,EAAAC,cAACyC,EAAD,CAAUlC,KAAMA,YA/BSH,IAAMC,WCjDnBqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.6626ed5a.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\n\nclass Review extends React.Component {\n  render() {\n    const review = this.props.review;\n    return (\n      <tr>\n        <td>{review.yelp_rating}</td>\n        <td>{review.model_rating}</td>\n        <td>{review.text}</td>\n      </tr>\n    );\n  }\n}\n\nclass Business extends React.Component {\n  render() {\n    if (!this.props.data) {\n      return null;\n    }\n    const data = this.props.data;\n  return (\n    <div>\n      <li>Business Name: {data.name}</li> \n      <li>Yelp Rating (overall rating): {data.yelp_rating}</li> \n      <li>Review Rating (scores of 20 most relevant reviews averaged out): {data.review_rating}</li> \n      <li>Model Rating: (model predicted scores of 20 most relevant reviews averaged out): {data.model_rating}</li> \n      <strong>Reviews</strong>\n      <Reviews reviews={data.reviews} />\n    </div>\n  );\n  }\n}\n\n\nclass Reviews extends React.Component {\n  render() {\n    const reviews = this.props.reviews;\n    const listItems = reviews.map((review) =>\n    <tr>\n      <Review review={review} />\n    </tr>\n  );\n  return (\n    <table>\n        <tr>\n          <th>Yelp Rating</th>\n          <th>Model Rating</th>\n          <th>Review</th> \n        </tr>\n      {listItems}\n    </table>\n    \n  );\n  }\n}\n\nexport default class App extends React.Component {\n  state = { data: null, name: '', reviews: {} };\n\n  handleChange = event => {\n    this.setState({ name: event.target.value });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n    let url = encodeURIComponent(this.state.name);\n    axios.get(`http://localhost:5432/business/${url}`)\n      .then(response => this.setState({ data: response.data }))\n      .catch(function (error) {\n        console.log('Fetch error: ' + error.message);\n      })\n  }\n\n  render() {\n    const data = this.state.data;\n    \n    return (\n      <div>\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            <strong>Enter Yelp URL: </strong>\n            <input type=\"text\" name=\"name\" onChange={this.handleChange} />\n          </label>\n          <button type=\"submit\">Submit</button>\n        </form>\n      </div>\n        <Business data={data} />\n      </div>\n      \n    )\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}